#!/usr/bin/env bash

_yarn_completion() {
  local curr prev opts subcommands comp get_scripts get_dependencies get_global_dependencies yarn_config

  COMPREPLY=()
  curr="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  yarn_config="$HOME/.config/yarn"
  subcommands="access add bin cache check clean config generate-lock-entry global help info init install licenses link list login logout outdated owner pack publish remove run tag team unlink upgrade upgrade-interactive version versions why"
  opts="-h --help -V --version --verbose --offline --prefer-offline --strict-semver --json --ignore-scripts --har --ignore-platform --ignore-engines --ignore-optional --force --no-bin-links --flat --prod --production --no-lockfile --pure-lockfile --global-folder --modules-folder --cache-folder --mutex --no-emoji --proxy --https-proxy --no-progress"

  # Node scripts
  get_scripts="const pkg = require('./package.json'); \
    const scripts = pkg.scripts ? Object.keys(pkg.scripts) : [];
    console.log(scripts.join(' '))"
  get_dependencies="const pkg = require('./package.json'); \
    const deps = pkg.dependencies ? Object.keys(pkg.dependencies) : [];
    const devDeps = pkg.devDependencies ? Object.keys(pkg.devDependencies) : []; \
    console.log(deps.concat(devDeps).join(' '));"
  get_global_dependencies="const path = require('path'); \
    const yarnPath = '.config/yarn/global/package.json';
    const pkg = require(path.join(process.env.HOME, yarnPath)); \
    const deps = pkg.dependencies ? Object.keys(pkg.dependencies) : [];
    console.log(deps.join(' '));"

  # Options
  if [[ "$curr" == -* ]]; then
    case "${COMP_WORDS[1]}" in
      add)
        opts="$opts -D --dev -P --peer -O --optional -E --exact -T --tilde"
        ;;
      check)
        opts="$opts --integrity"
        ;;
      global)
        opts="$opts --prefix"
        ;;
      init)
        opts="$opts -y --yes"
        ;;
      licenses)
        opts="$opts --production"
        ;;
      list|ls|la|ll)
        opts="$opts --depth"
        ;;
      pack)
        opts="$opts -f --filename"
        ;;
      publish)
        opts="$opts --new-version --message --no-git-tag-version --access --tag"
        ;;
      upgrade|update|up)
        opts="$opts --ignore-engines"
        ;;
      version|verison|v)
        opts="$opts --new-version --message --no-git-tag-version"
        ;;
    esac

    COMPREPLY=($(compgen -W "$opts" -- "$curr"))
    return 0
  fi

  # Subcommand expected
  if [[ $COMP_CWORD == 1 ]]; then
    COMPREPLY=($(compgen -W "$subcommands" -- "$curr"))
    return 0
  fi

  # First argument to subcommands
  if [[ $COMP_CWORD == 2 ]]; then
    case "${COMP_WORDS[1]}" in
      access)
        comp="public restricted grant revoke ls-packages ls-collaborators edit"
        ;;
      cache)
        comp="ls dir clean"
        ;;
      config|c)
        comp="set get delete list"
        ;;
      global)
        comp="add bin ls remove upgrade"
        ;;
      help)
        comp="$subcommands"
        ;;
      licenses)
        comp="ls generate-disclaimer"
        ;;
      link)
        if [[ -d "$yarn_config/link" ]]; then
          comp=$(find "$yarn_config/link" -type l | sed -e "s#$yarn_config/link/##")
        fi
        ;;
      owner|author)
        comp="add rm ls"
        ;;
      remove|r|rm|un|uninstall)
        if [[ -f "./package.json" ]]; then
          comp=$(node -e "$get_dependencies")
        fi
        ;;
      run|runScript|run-script)
        if [[ -f "./package.json" ]]; then
          comp=$(node -e "$get_scripts")
        fi
        ;;
      tag|dist-tag|dist-tags)
        comp="add rm ls"
        ;;
      team)
        comp="create destroy add rm ls"
        ;;
      why)
        if [[ -d "./node_modules" ]]; then
          comp=$(ls node_modules)
        fi
        ;;
    esac

    COMPREPLY=($(compgen -W "$comp" -- "$curr"))
    return 0
  fi

  # Subcommands with more than one argument
  case "${COMP_WORDS[1]}" in
    global)
      if [[ "${COMP_WORDS[2]}" == "remove" ]]; then
        if [[ -f "$yarn_config/global/package.json" ]]; then
          comp=$(node -e "$get_global_dependencies")
        fi
      fi
      ;;
    link)
      if [[ -d "$yarn_config/link" ]]; then
        comp=$(find "$yarn_config/link" -type l | sed -e "s#$yarn_config/link/##")
      fi
      ;;
    remove|r|rm|un|uninstall)
      if [[ -f "./package.json" ]]; then
        comp=$(node -e "$get_dependencies")
      fi
      ;;
  esac

  COMPREPLY=($(compgen -W "$comp" -- "$curr"))
  return 0
}

complete -o default -F _yarn_completion yarn
